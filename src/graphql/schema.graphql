schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ModelNoteConnection {
  items: [Note]
  nextToken: String
}

type Mutation {
  createNote(condition: ModelNoteConditionInput, input: CreateNoteInput!): Note
  deleteNote(condition: ModelNoteConditionInput, input: DeleteNoteInput!): Note
  updateNote(condition: ModelNoteConditionInput, input: UpdateNoteInput!): Note
}

type Note {
  createdAt: AWSDateTime!
  description: String
  id: ID!
  image: String
  name: String!
  updatedAt: AWSDateTime!
}

type Query {
  getNote(id: ID!): Note
  listNotes(filter: ModelNoteFilterInput, limit: Int, nextToken: String): ModelNoteConnection
}

type Subscription {
  onCreateNote: Note @aws_subscribe(mutations : ["createNote"])
  onDeleteNote: Note @aws_subscribe(mutations : ["deleteNote"])
  onUpdateNote: Note @aws_subscribe(mutations : ["updateNote"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateNoteInput {
  description: String
  id: ID
  image: String
  name: String!
}

input DeleteNoteInput {
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelNoteConditionInput {
  and: [ModelNoteConditionInput]
  description: ModelStringInput
  image: ModelStringInput
  name: ModelStringInput
  not: ModelNoteConditionInput
  or: [ModelNoteConditionInput]
}

input ModelNoteFilterInput {
  and: [ModelNoteFilterInput]
  description: ModelStringInput
  id: ModelIDInput
  image: ModelStringInput
  name: ModelStringInput
  not: ModelNoteFilterInput
  or: [ModelNoteFilterInput]
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input UpdateNoteInput {
  description: String
  id: ID!
  image: String
  name: String
}
